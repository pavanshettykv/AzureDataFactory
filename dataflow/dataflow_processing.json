{
	"name": "dataflow_processing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_landing_order_items",
						"type": "DatasetReference"
					},
					"name": "sourceorderitems"
				},
				{
					"dataset": {
						"referenceName": "ds_landing_orders",
						"type": "DatasetReference"
					},
					"name": "sourceorders"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_tgt_high_value",
						"type": "DatasetReference"
					},
					"name": "sinkhighvalue"
				},
				{
					"dataset": {
						"referenceName": "ds_tgt_low_value",
						"type": "DatasetReference"
					},
					"name": "sinklowvalue"
				},
				{
					"dataset": {
						"referenceName": "ds_tgt_errorneous",
						"type": "DatasetReference"
					},
					"name": "sinkerrorneous"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          order_item_id as short,",
				"          order_item_order_id as short,",
				"          order_item_product_id as short,",
				"          order_item_quantity as short,",
				"          order_item_subtotal as double,",
				"          order_item_product_price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> sourceorderitems",
				"source(output(",
				"          order_id as short,",
				"          order_date as string,",
				"          order_customer_id as short,",
				"          order_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceorders",
				"sourceorderitems aggregate(groupBy(order_item_order_id),",
				"     order_total = sum(order_item_subtotal)) ~> aggregate1",
				"aggregate1, sourceorders join(order_item_order_id == order_id,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          order_id,",
				"          order_date,",
				"          customer_id = order_customer_id,",
				"          order_status,",
				"          order_total",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(order_total>500,",
				"     order_total<=500,",
				"     disjoint: false) ~> split1@(highvalueorders, lowvalueorders, errorneous)",
				"split1@highvalueorders sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkhighvalue",
				"split1@lowvalueorders sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinklowvalue",
				"split1@errorneous sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkerrorneous"
			]
		}
	}
}